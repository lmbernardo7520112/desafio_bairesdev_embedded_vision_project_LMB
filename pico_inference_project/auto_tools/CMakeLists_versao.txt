# ============================================================
# VERS√ÉO AJUSTADA PARA USO COM SUBM√ìDULO pico-tflmicro
# ============================================================

message(STATUS "üß™ CMakeLists.txt carregado!")

cmake_minimum_required(VERSION 3.16)

# ESSENCIAL: Desativa malloc.c da SDK
set(PICO_NO_MALLOC 1)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

include(external/pico-tflmicro/pico_sdk_import.cmake)

project(pico_inference_project C CXX ASM)

set(CMAKE_SYSTEM_PROCESSOR cortex-m0plus)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mcpu=cortex-m0plus -mthumb")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=cortex-m0plus -mthumb")
set(CMAKE_ASM_FLAGS "${CMAKE_ASM_FLAGS} -mcpu=cortex-m0plus -mthumb")

# Garante que TODAS as bibliotecas e subdiret√≥rios (inclusive pico-tflmicro) usem a arquitetura correta
add_compile_options(-mcpu=cortex-m0plus -mthumb)
add_link_options(-mcpu=cortex-m0plus -mthumb)

pico_sdk_init()

# ============================================================
# CONFIGURA√á√ÉO CORRETA DO BOOT STAGE 2
# ============================================================
# REMOVIDO: set(PICO_BOOT_STAGE2_BINARY ${CMAKE_CURRENT_LIST_DIR}/boot_stage2.bin)
# 
# O Pico SDK automaticamente seleciona o boot stage 2 correto baseado no:
# - PICO_BOARD (definido como "pico" por padr√£o)
# - Flash chip detectado/configurado
# 
# Para W25Q080 (seu caso), use uma das op√ß√µes abaixo:

# OP√á√ÉO 1: Deixar autom√°tico (RECOMENDADO)
# O SDK escolhe automaticamente baseado no board

# OP√á√ÉO 2: Especificar explicitamente o tipo de flash
# set(PICO_BOOT_STAGE2_CHOOSE_W25Q080 1)

# OP√á√ÉO 3: Para casos espec√≠ficos, definir diretamente
# set(PICO_DEFAULT_BOOT_STAGE2_FILE ${PICO_SDK_PATH}/src/rp2_common/boot_stage2/boot2_w25q080.S)

# Para seu projeto, OP√á√ÉO 1 (autom√°tico) deve funcionar perfeitamente
message(STATUS "üöÄ Usando boot stage 2 autom√°tico do Pico SDK")

# ============================================================

# Desativa testes do pico-tflmicro se n√£o forem usados
set(PICO_TFLMICRO_ENABLE_TESTS OFF CACHE BOOL "Disable tests" FORCE)

# Adiciona a subpasta da biblioteca TFLM com CMSIS-NN
add_subdirectory(external/pico-tflmicro)

# Biblioteca SSD1306
add_subdirectory(lib/ssd1306)

# Execut√°vel principal
add_executable(pico_inference_project
    pico_inference_project.cpp
    src/inference.cpp
    src/model_data.cc
    src/image_provider.cpp
)

# Includes necess√°rios para o TFLM + seu projeto
target_include_directories(pico_inference_project PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}/include
    ${CMAKE_CURRENT_LIST_DIR}/src  # <-- ADICIONADO PARA image_provider.h
    ${CMAKE_CURRENT_LIST_DIR}/external/pico-tflmicro/src
)

# Linkagem de bibliotecas
target_link_libraries(pico_inference_project PRIVATE
    pico_stdlib
    hardware_i2c
    hardware_gpio
    hardware_uart
    pico-tflmicro
    ssd1306
    pico_multicore
)

# ‚ö†Ô∏è Habilita CMSIS-NN e mem√≥ria est√°tica do TFLM
target_compile_definitions(pico_inference_project PRIVATE
    CMSIS_NN
    TF_LITE_STATIC_MEMORY
    TF_LITE_DISABLE_X86_NEON
    PICO_NO_MALLOC
    CMSIS_NN_USE_CMSIS_DSP
    ARM_MATH_CM0PLUS
)

# Otimiza√ß√µes de tamanho
target_compile_options(pico_inference_project PRIVATE
    -Os
    -flto
    -fomit-frame-pointer
    -fno-unroll-loops
    -fno-exceptions
    -ffunction-sections
    -fdata-sections
    -mthumb
    -mcpu=cortex-m0plus
)

target_link_options(pico_inference_project PRIVATE
    -flto
    -Wl,--gc-sections
    -Wl,--wrap=malloc
    -Wl,--wrap=free
    -mcpu=cortex-m0plus
    -mthumb
)

# Configura√ß√µes espec√≠ficas da Raspberry Pi Pico
pico_enable_stdio_uart(pico_inference_project 1)
pico_enable_stdio_usb(pico_inference_project 0)
pico_set_binary_type(pico_inference_project pico_sdk_default)
pico_add_extra_outputs(pico_inference_project)

#add_custom_target(all DEPENDS pico_inference_project)
